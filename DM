{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8053840,"sourceType":"datasetVersion","datasetId":4749910}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport torch\nimport torch.nn.functional as F\nfrom matplotlib import pyplot as plt\nfrom PIL import Image\nimport torchvision\nfrom datasets import load_dataset\nfrom torchvision import transforms\nfrom tqdm import tqdm\nimport os\nfrom torchvision.models import inception_v3\nfrom torchvision.transforms import functional as TF\nfrom torchvision.utils import save_image\nfrom scipy.linalg import sqrtm\n\n\ndef show_images(x):\n    \"\"\"Given a batch of images x, make a grid and convert to PIL\"\"\"\n    x = x * 0.5 + 0.5  # Map from (-1, 1) back to (0, 1)\n    grid = torchvision.utils.make_grid(x)\n    grid_im = grid.detach().cpu().permute(1, 2, 0).clip(0, 1) * 255\n    grid_im = Image.fromarray(np.array(grid_im).astype(np.uint8))\n    return grid_im\n\n\ndef make_grid(images, size=64):\n    \"\"\"Given a list of PIL images, stack them together into a line for easy viewing\"\"\"\n    output_im = Image.new(\"RGB\", (size * len(images), size))\n    for i, im in enumerate(images):\n        output_im.paste(im.resize((size, size)), (i * size, 0))\n    return output_im\n\n\n# Mac users may need device = 'mps' (untested)\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:10:06.864766Z","iopub.execute_input":"2024-07-14T15:10:06.865504Z","iopub.status.idle":"2024-07-14T15:10:12.823219Z","shell.execute_reply.started":"2024-07-14T15:10:06.865471Z","shell.execute_reply":"2024-07-14T15:10:12.822235Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"dataset = load_dataset(\"cifar10\", split=\"train\")\nimage_size = 32\nbatch_size = 64\n\n# Define data augmentations\npreprocess = transforms.Compose(\n    [\n        transforms.Resize((image_size, image_size)),  # Resize\n        transforms.RandomHorizontalFlip(),  # Randomly flip (data augmentation)\n        transforms.ToTensor(),  # Convert to tensor (0, 1)\n        transforms.Normalize([0.5], [0.5]),  # Map to (-1, 1)\n    ]\n)\n\n\ndef transform(examples):\n    images = [preprocess(image.convert(\"RGB\")) for image in examples[\"img\"]]\n    return {\"images\": images}\n\n\ndataset.set_transform(transform)\n\n# Create a dataloader from the dataset to serve up the transformed images in batches\ntrain_dataloader = torch.utils.data.DataLoader(\n    dataset, batch_size=batch_size, shuffle=True\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:10:12.825003Z","iopub.execute_input":"2024-07-14T15:10:12.825477Z","iopub.status.idle":"2024-07-14T15:10:43.892562Z","shell.execute_reply.started":"2024-07-14T15:10:12.825451Z","shell.execute_reply":"2024-07-14T15:10:43.891831Z"},"trusted":true},"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading readme:   0%|          | 0.00/5.16k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3335fff928f14a728d5b363109ff66eb"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading data:   0%|          | 0.00/120M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ec45c817e32e4e6baea8b3cca3646698"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading data:   0%|          | 0.00/23.9M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5a3ca3978d72429d821cb497f477f7b3"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating train split:   0%|          | 0/50000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"026362cb1ed94c39b8d40e0dee46b7dd"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating test split:   0%|          | 0/10000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d0449c78fa3a4715a4b0f75a9ad12b7b"}},"metadata":{}}]},{"cell_type":"code","source":"next(iter(train_dataloader))","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:10:43.893550Z","iopub.execute_input":"2024-07-14T15:10:43.893805Z","iopub.status.idle":"2024-07-14T15:10:44.046539Z","shell.execute_reply.started":"2024-07-14T15:10:43.893783Z","shell.execute_reply":"2024-07-14T15:10:44.045695Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"{'images': tensor([[[[ 0.1294,  0.0745,  0.0667,  ...,  0.1137,  0.1137,  0.1608],\n           [ 0.1843,  0.1373,  0.0667,  ...,  0.1059,  0.1451,  0.2235],\n           [ 0.0745,  0.1059,  0.0667,  ...,  0.0431,  0.0902,  0.2235],\n           ...,\n           [ 0.1843, -0.0588, -0.0353,  ...,  0.0431,  0.0902,  0.0510],\n           [ 0.2314,  0.0353, -0.0510,  ...,  0.2157,  0.2157,  0.0353],\n           [ 0.4745,  0.2157,  0.0118,  ...,  0.2235,  0.3333,  0.1216]],\n \n          [[ 0.1608,  0.1059,  0.0980,  ...,  0.1529,  0.1451,  0.1922],\n           [ 0.2157,  0.1686,  0.0980,  ...,  0.1373,  0.1765,  0.2549],\n           [ 0.1059,  0.1373,  0.0980,  ...,  0.0745,  0.1216,  0.2549],\n           ...,\n           [ 0.2157, -0.0275, -0.0039,  ...,  0.0745,  0.1216,  0.0824],\n           [ 0.2627,  0.0667, -0.0196,  ...,  0.2471,  0.2471,  0.0667],\n           [ 0.5059,  0.2471,  0.0431,  ...,  0.2549,  0.3647,  0.1529]],\n \n          [[ 0.1843,  0.1294,  0.1216,  ...,  0.1451,  0.1373,  0.1843],\n           [ 0.2392,  0.1922,  0.1216,  ...,  0.1294,  0.1686,  0.2471],\n           [ 0.1294,  0.1608,  0.1216,  ...,  0.0667,  0.1137,  0.2471],\n           ...,\n           [ 0.2157, -0.0353, -0.0118,  ...,  0.0745,  0.1137,  0.0745],\n           [ 0.2627,  0.0588, -0.0275,  ...,  0.2471,  0.2392,  0.0588],\n           [ 0.5059,  0.2392,  0.0353,  ...,  0.2549,  0.3569,  0.1451]]],\n \n \n         [[[ 0.3098,  0.3804,  0.3490,  ...,  0.3098,  0.2784,  0.3020],\n           [ 0.3647,  0.3961,  0.4353,  ...,  0.2627,  0.2627,  0.3647],\n           [ 0.0588,  0.0745,  0.2078,  ...,  0.2706,  0.2706,  0.3098],\n           ...,\n           [ 0.1843,  0.0980,  0.0118,  ...,  0.2471,  0.2706,  0.2706],\n           [ 0.3176,  0.2157,  0.1608,  ...,  0.3255,  0.3020,  0.3098],\n           [ 0.3647,  0.2549,  0.2157,  ...,  0.3412,  0.3098,  0.3412]],\n \n          [[ 0.2784,  0.3725,  0.3176,  ...,  0.3490,  0.2863,  0.3176],\n           [ 0.3725,  0.4196,  0.4431,  ...,  0.3333,  0.3176,  0.4196],\n           [ 0.1216,  0.1608,  0.2627,  ...,  0.3804,  0.3725,  0.4118],\n           ...,\n           [ 0.0431, -0.0039, -0.0745,  ...,  0.1216,  0.1529,  0.1686],\n           [ 0.1686,  0.1059,  0.0902,  ...,  0.1843,  0.1608,  0.1843],\n           [ 0.2078,  0.1373,  0.1373,  ...,  0.2157,  0.1843,  0.2314]],\n \n          [[ 0.1843,  0.2784,  0.2314,  ...,  0.1451,  0.1137,  0.1216],\n           [ 0.2627,  0.3098,  0.3333,  ...,  0.0980,  0.0980,  0.1922],\n           [-0.0510, -0.0118,  0.0980,  ...,  0.1059,  0.1137,  0.1451],\n           ...,\n           [-0.0039, -0.0745, -0.1451,  ...,  0.0667,  0.0980,  0.0902],\n           [ 0.1451,  0.0588,  0.0039,  ...,  0.1451,  0.1216,  0.1216],\n           [ 0.1922,  0.0902,  0.0588,  ...,  0.1608,  0.1294,  0.1451]]],\n \n \n         [[[ 0.4745,  0.4902,  0.4902,  ...,  0.5451,  0.3333,  0.1765],\n           [ 0.4118,  0.4039,  0.4588,  ...,  0.2627,  0.1059,  0.0353],\n           [ 0.3490,  0.3882,  0.4902,  ...,  0.3176,  0.2235,  0.1451],\n           ...,\n           [-0.1059, -0.1922, -0.2157,  ..., -0.2706, -0.3961, -0.4510],\n           [-0.0588, -0.0745, -0.0745,  ..., -0.2706, -0.3412, -0.4118],\n           [-0.1137, -0.1059, -0.0588,  ..., -0.3098, -0.2863, -0.3255]],\n \n          [[ 0.6549,  0.6706,  0.6706,  ...,  0.6000,  0.4510,  0.3490],\n           [ 0.6235,  0.6235,  0.6549,  ...,  0.4196,  0.3176,  0.2863],\n           [ 0.6000,  0.6235,  0.6706,  ...,  0.4510,  0.3882,  0.3333],\n           ...,\n           [ 0.0275, -0.0588, -0.0824,  ..., -0.1373, -0.2627, -0.3098],\n           [ 0.0824,  0.0588,  0.0588,  ..., -0.1373, -0.2000, -0.2706],\n           [ 0.0196,  0.0353,  0.0824,  ..., -0.1765, -0.1529, -0.1843]],\n \n          [[ 0.8510,  0.8745,  0.8745,  ...,  0.7020,  0.6314,  0.5843],\n           [ 0.8510,  0.8431,  0.8745,  ...,  0.6314,  0.5765,  0.5608],\n           [ 0.8667,  0.8588,  0.8745,  ...,  0.6471,  0.6157,  0.5686],\n           ...,\n           [ 0.1843,  0.0980,  0.0745,  ...,  0.0039, -0.1059, -0.1529],\n           [ 0.2314,  0.2000,  0.2157,  ...,  0.0039, -0.0510, -0.1216],\n           [ 0.1765,  0.1922,  0.2314,  ..., -0.0353, -0.0039, -0.0353]]],\n \n \n         ...,\n \n \n         [[[ 0.4039,  0.3961,  0.4431,  ...,  0.2627,  0.2078,  0.2627],\n           [ 0.4196,  0.3961,  0.4039,  ...,  0.6000,  0.4667,  0.3725],\n           [ 0.2235,  0.3098,  0.4039,  ...,  0.5294,  0.3725,  0.2314],\n           ...,\n           [ 0.5451,  0.5294,  0.5294,  ..., -0.6157, -0.6549, -0.6784],\n           [ 0.5294,  0.5137,  0.5294,  ..., -0.4588, -0.5373, -0.5843],\n           [ 0.5451,  0.5216,  0.5373,  ...,  0.1373, -0.0745, -0.2784]],\n \n          [[ 0.5922,  0.5608,  0.6000,  ...,  0.5922,  0.5373,  0.5765],\n           [ 0.5529,  0.5137,  0.5451,  ...,  0.7725,  0.7020,  0.6549],\n           [ 0.3961,  0.4431,  0.5451,  ...,  0.7020,  0.6235,  0.5608],\n           ...,\n           [ 0.5608,  0.5451,  0.5451,  ..., -0.4745, -0.4902, -0.5059],\n           [ 0.5451,  0.5294,  0.5451,  ..., -0.3255, -0.3882, -0.4196],\n           [ 0.5608,  0.5373,  0.5529,  ...,  0.2314,  0.0353, -0.1608]],\n \n          [[ 0.6941,  0.6471,  0.6941,  ...,  0.8039,  0.7569,  0.7804],\n           [ 0.6314,  0.5922,  0.6157,  ...,  0.8353,  0.8275,  0.8039],\n           [ 0.5294,  0.5373,  0.6078,  ...,  0.7490,  0.7412,  0.7412],\n           ...,\n           [ 0.5216,  0.5059,  0.5059,  ..., -0.3569, -0.3647, -0.3725],\n           [ 0.5059,  0.4902,  0.5059,  ..., -0.2314, -0.2863, -0.3020],\n           [ 0.5216,  0.4980,  0.5137,  ...,  0.2706,  0.0824, -0.0980]]],\n \n \n         [[[ 0.7647,  0.7490,  0.7490,  ...,  0.6941,  0.6863,  0.6863],\n           [ 0.7882,  0.7725,  0.7882,  ...,  0.7490,  0.7333,  0.7176],\n           [ 0.7569,  0.7490,  0.7882,  ...,  0.7569,  0.7333,  0.7176],\n           ...,\n           [-0.3176, -0.4196, -0.5922,  ..., -0.3255, -0.2941, -0.3176],\n           [-0.2706, -0.3412, -0.5059,  ..., -0.2235, -0.1922, -0.2706],\n           [-0.3176, -0.3647, -0.5059,  ..., -0.1529, -0.2000, -0.2549]],\n \n          [[ 0.8039,  0.7882,  0.7804,  ...,  0.7176,  0.7098,  0.7098],\n           [ 0.8353,  0.8118,  0.8275,  ...,  0.7490,  0.7255,  0.7020],\n           [ 0.7882,  0.7882,  0.8275,  ...,  0.7490,  0.7333,  0.7255],\n           ...,\n           [ 0.1451, -0.0118, -0.1922,  ...,  0.1059,  0.1686,  0.1529],\n           [ 0.2000,  0.0902, -0.0902,  ...,  0.2000,  0.2471,  0.1686],\n           [ 0.1529,  0.0824, -0.0824,  ...,  0.2392,  0.2000,  0.1529]],\n \n          [[ 0.8353,  0.8275,  0.8275,  ...,  0.7490,  0.7412,  0.7412],\n           [ 0.8431,  0.8118,  0.8275,  ...,  0.8118,  0.7961,  0.7725],\n           [ 0.8431,  0.8196,  0.8510,  ...,  0.7882,  0.7412,  0.7098],\n           ...,\n           [-0.5843, -0.7255, -0.8824,  ..., -0.6157, -0.6235, -0.6706],\n           [-0.5608, -0.6471, -0.8196,  ..., -0.5373, -0.5373, -0.6314],\n           [-0.6314, -0.6706, -0.8118,  ..., -0.4902, -0.5608, -0.6235]]],\n \n \n         [[[ 0.0667, -0.1137, -0.0902,  ..., -0.1608, -0.1765, -0.2549],\n           [ 0.1373, -0.0902, -0.0588,  ..., -0.1608, -0.1608, -0.2000],\n           [ 0.1216, -0.0824, -0.0510,  ..., -0.1765, -0.1608, -0.2235],\n           ...,\n           [ 0.9451,  0.8745,  0.7725,  ...,  0.8039,  0.8275,  0.8902],\n           [ 1.0000,  0.9608,  0.9686,  ...,  0.9686,  0.9686,  0.9843],\n           [ 1.0000,  0.9922,  0.9922,  ...,  0.9922,  0.9922,  0.9922]],\n \n          [[ 0.0667, -0.1137, -0.0902,  ..., -0.1608, -0.1765, -0.2549],\n           [ 0.1373, -0.0902, -0.0588,  ..., -0.1608, -0.1608, -0.2000],\n           [ 0.1216, -0.0824, -0.0510,  ..., -0.1765, -0.1608, -0.2235],\n           ...,\n           [ 0.9451,  0.8745,  0.7725,  ...,  0.8039,  0.8275,  0.8902],\n           [ 1.0000,  0.9608,  0.9686,  ...,  0.9686,  0.9686,  0.9843],\n           [ 1.0000,  0.9922,  0.9922,  ...,  0.9922,  0.9922,  0.9922]],\n \n          [[ 0.0667, -0.1137, -0.0902,  ..., -0.1608, -0.1765, -0.2549],\n           [ 0.1373, -0.0902, -0.0588,  ..., -0.1608, -0.1608, -0.2000],\n           [ 0.1216, -0.0824, -0.0510,  ..., -0.1765, -0.1608, -0.2235],\n           ...,\n           [ 0.9451,  0.8745,  0.7725,  ...,  0.8039,  0.8275,  0.8902],\n           [ 1.0000,  0.9608,  0.9686,  ...,  0.9686,  0.9686,  0.9843],\n           [ 1.0000,  0.9922,  0.9922,  ...,  0.9922,  0.9922,  0.9922]]]])}"},"metadata":{}}]},{"cell_type":"code","source":"xb = next(iter(train_dataloader))[\"images\"].to(device)[:8]\nprint(\"X shape:\", xb.shape)\nshow_images(xb).resize((8 * 64, 64), resample=Image.NEAREST)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:10:44.049318Z","iopub.execute_input":"2024-07-14T15:10:44.049681Z","iopub.status.idle":"2024-07-14T15:10:44.332584Z","shell.execute_reply.started":"2024-07-14T15:10:44.049655Z","shell.execute_reply":"2024-07-14T15:10:44.331694Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"X shape: torch.Size([8, 3, 32, 32])\n","output_type":"stream"},{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"<PIL.Image.Image image mode=RGB size=512x64>","image/png":"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"},"metadata":{}}]},{"cell_type":"code","source":"%pip install -qq -U diffusers datasets transformers accelerate ftfy ","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:10:44.333942Z","iopub.execute_input":"2024-07-14T15:10:44.334788Z","iopub.status.idle":"2024-07-14T15:11:10.034102Z","shell.execute_reply.started":"2024-07-14T15:10:44.334751Z","shell.execute_reply":"2024-07-14T15:11:10.032860Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Note: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"from diffusers import DDPMScheduler\nfrom diffusers import UNet2DModel\nnoise_scheduler = DDPMScheduler(num_train_timesteps=1000)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:11:10.035661Z","iopub.execute_input":"2024-07-14T15:11:10.035950Z","iopub.status.idle":"2024-07-14T15:11:21.636843Z","shell.execute_reply.started":"2024-07-14T15:11:10.035923Z","shell.execute_reply":"2024-07-14T15:11:21.636068Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stderr","text":"2024-07-14 15:11:12.368614: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-07-14 15:11:12.368730: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-07-14 15:11:12.503670: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"timesteps = torch.linspace(0, 999, 8).long().to(device)\nnoise = torch.randn_like(xb)\nnoisy_xb = noise_scheduler.add_noise(xb, noise, timesteps)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:11:21.637870Z","iopub.execute_input":"2024-07-14T15:11:21.638426Z","iopub.status.idle":"2024-07-14T15:11:21.729383Z","shell.execute_reply.started":"2024-07-14T15:11:21.638402Z","shell.execute_reply":"2024-07-14T15:11:21.728587Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# Create a model\nmodel = UNet2DModel(\n    sample_size=image_size,  # the target image resolution\n    in_channels=3,  # the number of input channels, 3 for RGB images\n    out_channels=3,  # the number of output channels\n    layers_per_block=2,  # how many ResNet layers to use per UNet block\n    block_out_channels=(64, 128, 128, 256),  # More channels -> more parameters\n    down_block_types=(\n        \"DownBlock2D\",  # a regular ResNet downsampling block\n        \"DownBlock2D\",\n        \"AttnDownBlock2D\",  # a ResNet downsampling block with spatial self-attention\n        \"AttnDownBlock2D\",\n    ),\n    up_block_types=(\n        \"AttnUpBlock2D\",\n        \"AttnUpBlock2D\",  # a ResNet upsampling block with spatial self-attention\n        \"UpBlock2D\",\n        \"UpBlock2D\",  # a regular ResNet upsampling block\n    ),\n)\nmodel.to(device);","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:11:21.730430Z","iopub.execute_input":"2024-07-14T15:11:21.730690Z","iopub.status.idle":"2024-07-14T15:11:21.982755Z","shell.execute_reply.started":"2024-07-14T15:11:21.730669Z","shell.execute_reply":"2024-07-14T15:11:21.981991Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"with torch.no_grad():\n    model_prediction = model(noisy_xb, timesteps).sample\nmodel_prediction.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:11:21.984041Z","iopub.execute_input":"2024-07-14T15:11:21.984427Z","iopub.status.idle":"2024-07-14T15:11:22.768423Z","shell.execute_reply.started":"2024-07-14T15:11:21.984394Z","shell.execute_reply":"2024-07-14T15:11:22.767539Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"torch.Size([8, 3, 32, 32])"},"metadata":{}}]},{"cell_type":"code","source":"\nnoise_scheduler = DDPMScheduler(num_train_timesteps=1000, beta_schedule=\"squaredcos_cap_v2\")\n\n# Training loop\noptimizer = torch.optim.AdamW(model.parameters(), lr=4e-4)\n\nlosses = []\n\nfor epoch in range(1):\n    for step, batch in enumerate(tqdm(train_dataloader)):\n        clean_images = batch[\"images\"].to(device)\n        noise = torch.randn(clean_images.shape).to(clean_images.device)\n        bs = clean_images.shape[0]\n\n        timesteps = torch.randint(0, noise_scheduler.num_train_timesteps, (bs,), device=clean_images.device).long()\n\n        noisy_images = noise_scheduler.add_noise(clean_images, noise, timesteps)\n        noise_pred = model(noisy_images, timesteps, return_dict=False)[0]\n\n        loss = F.mse_loss(noise_pred, noise)\n        loss.backward()\n        losses.append(loss.item())\n\n        optimizer.step()\n        optimizer.zero_grad()\n\n    if (epoch + 1) % 5 == 0:\n        loss_last_epoch = sum(losses[-len(train_dataloader):]) / len(train_dataloader)\n        print(f\"Epoch:{epoch+1}, loss: {loss_last_epoch}\")\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:11:22.770848Z","iopub.execute_input":"2024-07-14T15:11:22.771104Z","iopub.status.idle":"2024-07-14T15:14:16.244356Z","shell.execute_reply.started":"2024-07-14T15:11:22.771082Z","shell.execute_reply":"2024-07-14T15:14:16.243424Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stderr","text":"  0%|          | 0/782 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/diffusers/configuration_utils.py:140: FutureWarning: Accessing config attribute `num_train_timesteps` directly via 'DDPMScheduler' object attribute is deprecated. Please access 'num_train_timesteps' over 'DDPMScheduler's config object instead, e.g. 'scheduler.config.num_train_timesteps'.\n  deprecate(\"direct config name access\", \"1.0.0\", deprecation_message, standard_warn=False)\n100%|██████████| 782/782 [02:53<00:00,  4.51it/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Random starting point (8 random images):\nsample = torch.randn(8, 3, 32, 32).to(device)\nshow_images(sample)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:18:06.980752Z","iopub.execute_input":"2024-07-14T15:18:06.981100Z","iopub.status.idle":"2024-07-14T15:18:06.992971Z","shell.execute_reply.started":"2024-07-14T15:18:06.981073Z","shell.execute_reply":"2024-07-14T15:18:06.991901Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"<PIL.Image.Image image mode=RGB size=274x36>","image/png":"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"},"metadata":{}}]},{"cell_type":"code","source":"for i, t in enumerate(noise_scheduler.timesteps):\n\n    # Get model pred\n    with torch.no_grad():\n        residual = model(sample, t).sample\n\n    # Update sample with step\n    sample = noise_scheduler.step(residual, t, sample).prev_sample\n\nshow_images(sample)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:18:08.516080Z","iopub.execute_input":"2024-07-14T15:18:08.516455Z","iopub.status.idle":"2024-07-14T15:18:31.159657Z","shell.execute_reply.started":"2024-07-14T15:18:08.516426Z","shell.execute_reply":"2024-07-14T15:18:31.158671Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"<PIL.Image.Image image mode=RGB size=274x36>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"!pip install pytorch-fid","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Helper function to preprocess images for Inception model\ndef preprocess_for_inception(imgs):\n    imgs = TF.resize(imgs, size=(299, 299))\n    imgs = (imgs * 0.5 + 0.5) * 255  # Denormalize to (0, 255)\n    imgs = imgs.to(torch.float32)\n    return imgs\n\n# Helper function to calculate the mean and covariance of features\ndef calculate_statistics(features):\n    mu = features.mean(dim=0)\n    sigma = torch.cov(features.T)\n    return mu, sigma\n\n# Function to compute FID score\ndef calculate_fid(real_features, generated_features):\n    mu_real, sigma_real = calculate_statistics(real_features)\n    mu_generated, sigma_generated = calculate_statistics(generated_features)\n\n    # Calculate FID score\n    diff = mu_real - mu_generated\n    covmean, _ = sqrtm(sigma_real @ sigma_generated, disp=False)\n    if np.iscomplexobj(covmean):\n        covmean = covmean.real\n\n    fid = diff @ diff + np.trace(sigma_real + sigma_generated - 2 * covmean)\n    return fid\n\n# Function to extract features using Inception model\ndef extract_features(images, model, device):\n    features = []\n    with torch.no_grad():\n        for batch in torch.split(images, batch_size):\n            batch = batch.to(device)\n            batch_features = model(batch).detach().cpu()\n            features.append(batch_features)\n    features = torch.cat(features, dim=0)\n    return features\n\n# Generate samples from the trained model\nnum_samples = 100  # Adjust as needed\ngenerated_images = []\nmodel.eval()\nwith torch.no_grad():\n    for _ in range(num_samples // batch_size + 1):\n        sample = torch.randn(batch_size, 3, 32, 32).to(device)\n        for t in noise_scheduler.timesteps:\n            residual = model(sample, t).sample\n            sample = noise_scheduler.step(residual, t, sample).prev_sample\n        generated_images.append(sample.cpu())\ngenerated_images = torch.cat(generated_images, dim=0)[:num_samples]\n\n# Save generated images for FID calculation\nos.makedirs(\"generated_images_fid\", exist_ok=True)\nfor i, img in enumerate(generated_images):\n    img = (img * 0.5 + 0.5).clamp(0, 1)  # Denormalize to (0, 1)\n    save_image(img, f\"generated_images_fid/img_{i}.png\")\n\n# Load real CIFAR-10 images\nreal_images = []\nfor batch in train_dataloader:\n    real_images.append(batch[\"images\"])\nreal_images = torch.cat(real_images, dim=0)[:num_samples]  # Limit to num_samples\nreal_images = (real_images * 0.5 + 0.5).clamp(0, 1)\n\n# Convert generated_images to Tensor\ngenerated_images = (generated_images * 0.5 + 0.5).clamp(0, 1)  # Denormalize to (0, 1)\n\n# Initialize Inception model\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\ninception = inception_v3(pretrained=True, transform_input=False).to(device)\ninception.eval()\n\n# Preprocess images and extract features\nreal_images = preprocess_for_inception(real_images)\ngenerated_images = preprocess_for_inception(generated_images)\n\nreal_features = extract_features(real_images, inception, device)\ngenerated_features = extract_features(generated_images, inception, device)\n\n# Calculate FID score\nfid_score = calculate_fid(real_features, generated_features)\nprint(f\"FID score: {fid_score}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:36:36.362064Z","iopub.execute_input":"2024-07-14T15:36:36.362531Z","iopub.status.idle":"2024-07-14T15:39:00.498466Z","shell.execute_reply.started":"2024-07-14T15:36:36.362483Z","shell.execute_reply":"2024-07-14T15:39:00.497451Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"FID score: 2901.2265625\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}